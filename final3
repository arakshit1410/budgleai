<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BUDGLE - AI Blockchain Finance App</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            background: #f5f5f5;
            color: #333;
            overflow-x: hidden;
        }
        
        .phone-container {
            max-width: 375px;
            margin: 0 auto;
            background: #fff;
            min-height: 100vh;
            position: relative;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }
        
        /* Status Bar */
        .status-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 20px;
            font-size: 14px;
            font-weight: 600;
            background: #fff;
        }
        
        .status-left {
            color: #000;
        }
        
        .status-right {
            display: flex;
            gap: 5px;
            align-items: center;
            color: #000;
        }
        
        /* Screen Management */
        .screen {
            display: none;
            min-height: calc(100vh - 40px);
            background: #fff;
        }
        
        .screen.active {
            display: block;
        }
        
        /* Onboarding Screen */
        .onboarding {
            text-align: center;
            padding: 60px 40px;
            background: #f8f9fa;
        }
        
        .logo-container {
            margin-bottom: 60px;
        }
        
        .wallet-icon {
            width: 200px;
            height: 140px;
            background: linear-gradient(135deg, #8B4513 0%, #D2691E 100%);
            border-radius: 15px;
            margin: 0 auto 20px;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .wallet-money {
            position: absolute;
            top: -10px;
            right: 10px;
            width: 60px;
            height: 80px;
            background: linear-gradient(135deg, #90EE90 0%, #32CD32 100%);
            border-radius: 5px;
            transform: rotate(-15deg);
        }
        
        .wallet-money::before {
            content: '';
            position: absolute;
            top: 5px;
            right: -15px;
            width: 50px;
            height: 70px;
            background: linear-gradient(135deg, #90EE90 0%, #32CD32 100%);
            border-radius: 5px;
            transform: rotate(10deg);
        }
        
        .budgle-logo {
            background: #1a73e8;
            color: white;
            width: 80px;
            height: 50px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 12px;
            margin: 20px auto;
        }
        
        .app-title {
            font-size: 28px;
            font-weight: 700;
            color: #8B4513;
            margin-bottom: 5px;
        }
        
        .app-subtitle {
            font-size: 14px;
            color: #666;
            margin-bottom: 60px;
        }
        
        .get-started-btn {
            background: #4CAF50;
            color: white;
            padding: 16px 50px;
            border: none;
            border-radius: 25px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
            max-width: 200px;
        }
        
        .get-started-btn:hover {
            background: #45a049;
        }
        
        .powered-by {
            position: absolute;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            align-items: center;
            gap: 8px;
            color: #666;
            font-size: 12px;
        }
        
        /* Welcome Screen */
        .welcome {
            padding: 40px 30px;
        }
        
        .welcome-title {
            font-size: 24px;
            font-weight: 700;
            color: #4CAF50;
            margin-bottom: 20px;
        }
        
        .welcome-text {
            color: #666;
            margin-bottom: 30px;
            line-height: 1.5;
        }
        
        .form-group {
            margin-bottom: 25px;
        }
        
        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }
        
        .form-input {
            width: 100%;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            background: #f9f9f9;
        }
        
        .form-input:focus {
            outline: none;
            border-color: #4CAF50;
            background: white;
        }
        
        .continue-btn {
            background: #4CAF50;
            color: white;
            padding: 16px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
        }
        
        /* Password Screen */
        .password-screen {
            padding: 40px 30px;
            text-align: center;
        }
        
        .password-title {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 30px;
        }
        
        .security-icon {
            width: 80px;
            height: 80px;
            background: #e3f2fd;
            border-radius: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 30px;
            font-size: 32px;
        }
        
        .password-desc {
            color: #666;
            margin-bottom: 40px;
            line-height: 1.5;
        }
        
        .password-input {
            position: relative;
            margin-bottom: 20px;
        }
        
        .toggle-password {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            cursor: pointer;
            color: #666;
        }
        
        /* Dashboard Screen */
        .dashboard {
            background: #f8f9fa;
        }
        
        .dashboard-header {
            background: white;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .app-name {
            font-size: 24px;
            font-weight: 700;
            color: #333;
        }
        
        .profile-btn {
            width: 40px;
            height: 40px;
            border-radius: 20px;
            background: #e9ecef;
            border: none;
            cursor: pointer;
            font-size: 18px;
        }
        
        .greeting {
            padding: 20px;
            background: white;
        }
        
        .greeting h2 {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 20px;
        }
        
        .expense-summary {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        
        .expense-card {
            text-align: center;
        }
        
        .expense-amount {
            font-size: 24px;
            font-weight: 700;
            color: #333;
        }
        
        .expense-amount.income { color: #4CAF50; }
        .expense-amount.expense { color: #f44336; }
        
        .expense-label {
            font-size: 12px;
            color: #666;
            margin-top: 5px;
        }
        
        .savings-section {
            background: #e8f5e8;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        
        .savings-amount {
            font-size: 18px;
            font-weight: 700;
            color: #2e7d32;
        }
        
        .update-btn {
            background: none;
            border: 1px solid #4CAF50;
            color: #4CAF50;
            padding: 8px 16px;
            border-radius: 5px;
            font-size: 12px;
            cursor: pointer;
            margin-top: 10px;
        }
        
        /* Transactions Section */
        .transactions-section {
            background: white;
            margin: 10px 20px;
            border-radius: 10px;
            overflow: hidden;
        }
        
        .section-header {
            padding: 20px;
            border-bottom: 1px solid #f0f0f0;
            font-size: 18px;
            font-weight: 600;
        }
        
        .transaction-item {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #f8f9fa;
        }
        
        .transaction-item:last-child {
            border-bottom: none;
        }
        
        .transaction-icon {
            width: 40px;
            height: 40px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            font-size: 18px;
        }
        
        .transaction-details {
            flex: 1;
        }
        
        .transaction-title {
            font-weight: 600;
            font-size: 16px;
            margin-bottom: 2px;
        }
        
        .transaction-subtitle {
            font-size: 12px;
            color: #666;
        }
        
        .transaction-amount {
            font-weight: 700;
            font-size: 16px;
        }
        
        .transaction-amount.positive { color: #4CAF50; }
        .transaction-amount.negative { color: #f44336; }
        
        /* Track Entry Screen */
        .track-entry {
            padding: 30px 20px;
        }
        
        .entry-tabs {
            display: flex;
            margin-bottom: 30px;
            background: #f0f0f0;
            border-radius: 8px;
            padding: 4px;
        }
        
        .entry-tab {
            flex: 1;
            padding: 12px;
            border: none;
            background: none;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
        }
        
        .entry-tab.active {
            background: #4CAF50;
            color: white;
        }
        
        .amount-input {
            font-size: 36px;
            font-weight: 300;
            border: none;
            outline: none;
            text-align: center;
            width: 100%;
            margin-bottom: 30px;
            color: #4CAF50;
        }
        
        .category-section {
            margin-bottom: 20px;
        }
        
        .category-label {
            font-weight: 600;
            margin-bottom: 10px;
        }
        
        .category-dropdown {
            width: 100%;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background: white;
            font-size: 16px;
        }
        
        .date-input {
            width: 100%;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
        }
        
        .note-input {
            width: 100%;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            min-height: 100px;
            resize: vertical;
        }
        
        .save-btn {
            background: #4CAF50;
            color: white;
            padding: 16px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
            margin: 30px 0;
        }
        
        /* Analysis Screen */
        .analysis {
            padding: 20px;
            background: #f8f9fa;
        }
        
        .analysis-header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .period-tabs {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .period-tab {
            padding: 8px 20px;
            border: 1px solid #4CAF50;
            background: none;
            border-radius: 20px;
            color: #4CAF50;
            font-weight: 600;
            cursor: pointer;
        }
        
        .period-tab.active {
            background: #4CAF50;
            color: white;
        }
        
        .chart-section {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .chart-title {
            font-weight: 600;
            margin-bottom: 20px;
        }
        
        .pie-chart {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            margin: 0 auto;
            position: relative;
        }
        
        .expense-chart {
            background: conic-gradient(#4CAF50 0% 60%, #FFC107 60% 80%, #FF5722 80% 100%);
        }
        
        .income-chart {
            background: conic-gradient(#4CAF50 0% 100%);
        }
        
        .chart-legend {
            margin-top: 15px;
            text-align: left;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            margin: 8px 0;
            font-size: 14px;
        }
        
        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 3px;
            margin-right: 10px;
        }
        
        .legend-text {
            flex: 1;
        }
        
        .legend-percentage {
            font-weight: 600;
            color: #333;
        }
        
        /* Alerts Screen */
        .alerts {
            background: #f8f9fa;
        }
        
        .alerts-header {
            background: white;
            padding: 20px;
            text-align: center;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .alerts-title {
            font-size: 20px;
            font-weight: 600;
        }
        
        .alert-item {
            background: white;
            margin: 10px 20px;
            border-radius: 10px;
            padding: 20px;
            border-left: 4px solid #4CAF50;
        }
        
        .alert-item.warning {
            border-left-color: #FF9800;
        }
        
        .alert-item.danger {
            border-left-color: #f44336;
        }
        
        .alert-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .alert-type {
            font-weight: 600;
            font-size: 14px;
        }
        
        .alert-type.normal { color: #4CAF50; }
        .alert-type.warning { color: #FF9800; }
        .alert-type.danger { color: #f44336; }
        
        .alert-time {
            font-size: 12px;
            color: #666;
        }
        
        .alert-message {
            color: #333;
            line-height: 1.4;
        }
        
        /* Goals Screen */
        .goals {
            background: #f8f9fa;
            padding: 20px;
        }
        
        .goals-header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .goals-title {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 10px;
        }
        
        .goals-subtitle {
            color: #666;
            margin-bottom: 20px;
        }
        
        .add-goal-btn {
            background: #4CAF50;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
        }
        
        .goal-item {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 15px;
        }
        
        .goal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .goal-name {
            font-weight: 600;
            font-size: 16px;
        }
        
        .goal-frequency {
            font-size: 12px;
            color: #666;
        }
        
        .goal-amounts {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
        }
        
        .goal-current {
            font-size: 20px;
            font-weight: 700;
            color: #4CAF50;
        }
        
        .goal-target {
            font-size: 14px;
            color: #666;
        }
        
        .goal-progress {
            background: #f0f0f0;
            height: 8px;
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 10px;
        }
        
        .goal-progress-fill {
            height: 100%;
            background: #4CAF50;
            border-radius: 4px;
            transition: width 0.3s;
        }
        
        .goal-percentage {
            font-size: 12px;
            color: #666;
            text-align: right;
        }
        
        /* Profile Screen */
        .profile {
            padding: 30px 20px;
        }
        
        .profile-header {
            text-align: center;
            margin-bottom: 40px;
        }
        
        .profile-title {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 30px;
        }
        
        .profile-avatar {
            width: 80px;
            height: 80px;
            border-radius: 40px;
            margin: 0 auto 15px;
            background: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }
        
        .profile-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .profile-name {
            font-size: 22px;
            font-weight: 600;
            margin-bottom: 20px;
        }
        
        .profile-info {
            text-align: left;
            margin-bottom: 30px;
        }
        
        .profile-item {
            display: flex;
            align-items: center;
            padding: 10px 0;
            color: #666;
        }
        
        .profile-item-icon {
            margin-right: 10px;
            width: 20px;
        }
        
        .edit-profile-btn {
            border: 1px solid #4CAF50;
            background: none;
            color: #4CAF50;
            padding: 12px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
            margin-bottom: 40px;
        }
        
        .profile-section {
            margin-bottom: 30px;
        }
        
        .section-title {
            font-weight: 600;
            margin-bottom: 15px;
            color: #333;
        }
        
        .profile-menu-item {
            display: flex;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
        }
        
        .profile-menu-item:hover {
            background: #f9f9f9;
        }
        
        .menu-item-icon {
            margin-right: 15px;
            font-size: 20px;
        }
        
        .menu-item-text {
            flex: 1;
            font-weight: 500;
        }
        
        .menu-item-arrow {
            color: #999;
        }
        
        .cancel-btn {
            background: #f0f0f0;
            color: #666;
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            margin-bottom: 20px;
            width: 100%;
        }
        
        .add-reminder-btn {
            background: #4CAF50;
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            margin-bottom: 20px;
            width: 100%;
        }
        
        .reminder-form {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: none;
        }
        
        .reminder-form input, .reminder-form select {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        /* Bottom Navigation */
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 375px;
            background: white;
            border-top: 1px solid #f0f0f0;
            display: flex;
            padding: 10px 0 25px 0;
        }
        
        .nav-item {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
            background: none;
            border: none;
            cursor: pointer;
            padding: 5px;
            color: #999;
        }
        
        .nav-item.active {
            color: #4CAF50;
        }
        
        .nav-icon {
            font-size: 20px;
        }
        
        .nav-label {
            font-size: 11px;
            font-weight: 500;
        }
        
        /* AI Chatbot */
        .chatbot {
            position: fixed;
            bottom: 90px;
            right: 20px;
            width: 56px;
            height: 56px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            cursor: pointer;
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
            z-index: 1000;
            font-size: 24px;
        }
        
        .chat-window {
            position: fixed;
            bottom: 160px;
            right: 20px;
            width: 320px;
            height: 400px;
            background: white;
            border-radius: 16px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3);
            display: none;
            flex-direction: column;
            z-index: 1001;
            overflow: hidden;
        }
        
        .chat-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 16px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .chat-title {
            font-size: 16px;
            font-weight: 600;
        }
        
        .chat-close {
            background: none;
            border: none;
            color: white;
            font-size: 18px;
            cursor: pointer;
        }
        
        .chat-messages {
            flex: 1;
            padding: 16px;
            overflow-y: auto;
            background: #f8f9fa;
        }
        
        .chat-input-container {
            padding: 16px;
            border-top: 1px solid #e9ecef;
            background: white;
        }
        
        .chat-input {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid #e9ecef;
            border-radius: 24px;
            outline: none;
            font-size: 14px;
        }
        
        .message {
            margin-bottom: 12px;
            max-width: 80%;
            padding: 10px 14px;
            border-radius: 16px;
            font-size: 14px;
            line-height: 1.4;
        }
        
        .message.bot {
            background: white;
            color: #333;
            align-self: flex-start;
            border-bottom-left-radius: 4px;
        }
        
        .message.user {
            background: #4CAF50;
            color: white;
            align-self: flex-end;
            margin-left: auto;
            border-bottom-right-radius: 4px;
        }
        
        /* Animations */
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .slide-in {
            animation: slideIn 0.3s ease-out;
        }
        
        /* Responsive */
        @media (max-width: 375px) {
            .phone-container {
                width: 100vw;
            }
            
            .bottom-nav {
                width: 100vw;
            }
        }
        
        /* Notification Badge */
        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #f44336;
            color: white;
            border-radius: 10px;
            width: 20px;
            height: 20px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        /* AI Alert Popup */
        .ai-alert {
            position: fixed;
            bottom: 120px;
            right: 20px;
            width: 280px;
            background: white;
            border-radius: 12px;
            padding: 16px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            z-index: 2000;
            display: none;
            border-left: 4px solid #4CAF50;
        }
        
        .ai-alert.show {
            display: block;
            animation: slideIn 0.3s ease-out;
        }
        
        .ai-alert-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 8px;
        }
        
        .ai-alert-icon {
            font-size: 18px;
        }
        
        .ai-alert-title {
            font-weight: 600;
            font-size: 14px;
        }
        
        .ai-alert-message {
            color: #666;
            font-size: 12px;
            line-height: 1.4;
        }
        
        .blockchain-hash {
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 10px;
            color: #888;
            margin-top: 5px;
            word-break: break-all;
        }
    </style>
</head>
<body>
    <div class="phone-container">
        <!-- Status Bar -->
        <div class="status-bar">
            <div class="status-left">9:41</div>
            <div class="status-right">
                <span>📶</span>
                <span>📳</span>
                <span>🔋</span>
            </div>
        </div>
        
        <!-- Onboarding Screen -->
        <div class="screen active" id="onboarding">
            <div class="onboarding">
                <div class="logo-container">
                    <div class="wallet-icon">
                        <div class="wallet-money"></div>
                        <div class="budgle-logo">💳</div>
                    </div>
                    <div class="app-title">BUDGLE</div>
                    <div class="app-subtitle">BUDGET FOR PEOPLE</div>
                </div>
                
                <button class="get-started-btn" onclick="showScreen('welcome')">Get Started</button>
                
                <div class="powered-by">
                    <span>🔗</span>
                    <span>Powered by Blockchain & AI</span>
                </div>
            </div>
        </div>
        
        <!-- Welcome Screen -->
        <div class="screen" id="welcome">
            <div class="welcome">
                <h2 class="welcome-title">Hi, welcome!</h2>
                <p class="welcome-text">Let's set up your Budgle account. We'll start with some basic details.</p>
                
                <div class="form-group">
                    <label class="form-label">Full Name</label>
                    <input type="text" class="form-input" id="fullName" placeholder="Enter your full name">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Email Address</label>
                    <input type="email" class="form-input" id="email" placeholder="you@example.com">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Mobile Number (for UPI)</label>
                    <input type="tel" class="form-input" id="mobile" placeholder="+91 12345 67890">
                </div>
                
                <button class="continue-btn" onclick="showScreen('password')">Continue</button>
            </div>
        </div>
        
        <!-- Password Screen -->
        <div class="screen" id="password">
            <div class="password-screen">
                <h2 class="password-title">Set Your Password</h2>
                <div class="security-icon">🔐</div>
                <p class="password-desc">Create a strong password for your Budgle account. It must be at least 8 characters long, including letters, numbers, and symbols.</p>
                
                <div class="form-group">
                    <label class="form-label">New Password</label>
                    <div class="password-input">
                        <input type="password" class="form-input" id="newPassword" placeholder="Enter your new password">
                        <button class="toggle-password" onclick="togglePasswordVisibility('newPassword')">👁️</button>
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Confirm Password</label>
                    <div class="password-input">
                        <input type="password" class="form-input" id="confirmPassword" placeholder="Re-enter your password">
                        <button class="toggle-password" onclick="togglePasswordVisibility('confirmPassword')">👁️</button>
                    </div>
                </div>
                
                <button class="continue-btn" onclick="createAccount()">Create Account</button>
            </div>
        </div>
        
        <!-- Dashboard Screen -->
        <div class="screen" id="dashboard">
            <div class="dashboard">
                <div class="dashboard-header">
                    <div class="app-name">BUDGLE</div>
                    <button class="profile-btn" onclick="showScreen('profile')">👤</button>
                </div>
                
                <div class="greeting">
                    <h2>Hello, Jane Doe!</h2>
                    
                    <div class="expense-summary">
                        <div class="expense-card">
                            <div class="expense-amount expense">₹18,500</div>
                            <div class="expense-label">Total Expenses</div>
                        </div>
                        <div class="expense-card">
                            <div class="expense-amount income">₹45,000</div>
                            <div class="expense-label">Total Income</div>
                        </div>
                    </div>
                    
                    <div class="savings-section">
                        <div class="savings-amount">₹26,500</div>
                        <div style="font-size: 12px; color: #666; margin-top: 5px;">Your Savings</div>
                        <button class="update-btn" onclick="showAIAlert('savings', 'AI Insight', 'Great job! You saved 15% more than last month. Your coffee expenses decreased by ₹800.')">🤖 Update Savings</button>
                    </div>
                </div>
                
                <div class="transactions-section">
                    <div class="section-header">Recent Transactions</div>
                    <div id="transactionsList">
                        <div class="transaction-item">
                            <div class="transaction-icon" style="background: #e8f5e8; color: #4CAF50;">🛒</div>
                            <div class="transaction-details">
                                <div class="transaction-title">Groceries at FreshMart</div>
                                <div class="transaction-subtitle">Food & Dining • May 15, 2024</div>
                            </div>
                            <div class="transaction-amount negative">₹1,350</div>
                        </div>
                        
                        <div class="transaction-item">
                            <div class="transaction-icon" style="background: #fff3e0; color: #FF9800;">👕</div>
                            <div class="transaction-details">
                                <div class="transaction-title">New Shirt at FashionHub</div>
                                <div class="transaction-subtitle">Shopping • May 14, 2024</div>
                            </div>
                            <div class="transaction-amount negative">₹900</div>
                        </div>
                        
                        <div class="transaction-item">
                            <div class="transaction-icon" style="background: #e3f2fd; color: #2196F3;">💼</div>
                            <div class="transaction-details">
                                <div class="transaction-title">Project Payment - Acme Corp</div>
                                <div class="transaction-subtitle">Income • May 13, 2024</div>
                            </div>
                            <div class="transaction-amount positive">₹15,000</div>
                        </div>
                        
                        <div class="transaction-item">
                            <div class="transaction-icon" style="background: #fce4ec; color: #E91E63;">🚗</div>
                            <div class="transaction-details">
                                <div class="transaction-title">Cab ride to Airport</div>
                                <div class="transaction-subtitle">Transportation • May 12, 2024</div>
                            </div>
                            <div class="transaction-amount negative">₹450</div>
                        </div>
                        
                        <div class="transaction-item">
                            <div class="transaction-icon" style="background: #f3e5f5; color: #9C27B0;">⚡</div>
                            <div class="transaction-details">
                                <div class="transaction-title">Electricity Bill</div>
                                <div class="transaction-subtitle">Utilities • May 11, 2024</div>
                            </div>
                            <div class="transaction-amount negative">₹1,200</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Track Entry Screen -->
        <div class="screen" id="trackEntry">
            <div class="track-entry">
                <div class="entry-tabs">
                    <button class="entry-tab active" onclick="switchEntryTab('expense')">Expense</button>
                    <button class="entry-tab" onclick="switchEntryTab('income')">Income</button>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Amount</label>
                    <input type="number" class="amount-input" id="entryAmount" placeholder="0.00" min="0" step="0.01">
                </div>
                
                <div class="form-group category-section">
                    <label class="category-label">Category</label>
                    <select class="category-dropdown" id="entryCategory">
                        <option value="">Select Category</option>
                        <option value="food">🍔 Food & Dining</option>
                        <option value="transport">🚗 Transportation</option>
                        <option value="shopping">🛒 Shopping</option>
                        <option value="entertainment">🎬 Entertainment</option>
                        <option value="health">🏥 Health</option>
                        <option value="utilities">⚡ Utilities</option>
                        <option value="education">📚 Education</option>
                        <option value="other">📝 Other</option>
                    </select>
                </div>
                
                <div class="form-group payment-method-section" id="paymentMethodSection" style="display: none;">
                    <label class="form-label">Payment Method</label>
                    <select class="category-dropdown" id="entryPaymentMethod">
                        <option value="">Select Payment Method</option>
                        <option value="upi">💳 UPI</option>
                        <option value="card">💳 Card</option>
                        <option value="cash">💵 Cash</option>
                        <option value="net-banking">🏦 Net Banking</option>
                        <option value="wallet">📱 Digital Wallet</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Date</label>
                    <input type="date" class="date-input" id="entryDate">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Note</label>
                    <textarea class="note-input" id="entryNote" placeholder="Add a note (optional)"></textarea>
                </div>
                
                <button class="save-btn" onclick="saveTransaction()">Save Transaction</button>
                
                <div class="transactions-section">
                    <div class="section-header">Recent Transactions</div>
                    <div class="transaction-item">
                        <div class="transaction-icon" style="background: #e8f5e8; color: #4CAF50;">💰</div>
                        <div class="transaction-details">
                            <div class="transaction-title">Manual Cash</div>
                            <div class="transaction-subtitle">Income • Today</div>
                        </div>
                        <div class="transaction-amount positive">₹2,000</div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Analysis Screen -->
        <div class="screen" id="analysis">
            <div class="analysis">
                <div class="analysis-header">
                    <h2>Analysis</h2>
                    <div class="period-tabs">
                        <button class="period-tab" onclick="switchPeriod('weekly')">Weekly</button>
                        <button class="period-tab active" onclick="switchPeriod('monthly')">Monthly</button>
                        <button class="period-tab" onclick="switchPeriod('yearly')">Yearly</button>
                    </div>
                </div>
                
                <div class="chart-section">
                    <div class="chart-title">Expense Breakdown</div>
                    <div class="pie-chart expense-chart"></div>
                    <div class="chart-legend" id="expenseLegend"></div>
                </div>
                
                <div class="chart-section">
                    <div class="chart-title">Income Breakdown</div>
                    <div class="pie-chart income-chart"></div>
                    <div class="chart-legend" id="incomeLegend">
                        <div class="legend-item">
                            <div class="legend-color" style="background: #4CAF50;"></div>
                            <div class="legend-text">Job Salary</div>
                            <div class="legend-percentage">65%</div>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color" style="background: #2196F3;"></div>
                            <div class="legend-text">Freelance</div>
                            <div class="legend-percentage">20%</div>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color" style="background: #FF9800;"></div>
                            <div class="legend-text">Investment</div>
                            <div class="legend-percentage">10%</div>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color" style="background: #9C27B0;"></div>
                            <div class="legend-text">Other</div>
                            <div class="legend-percentage">5%</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Alerts Screen -->
        <div class="screen" id="alerts">
            <div class="alerts">
                <div class="alerts-header">
                    <div class="alerts-title">Alerts</div>
                </div>
                
                <div class="alert-item">
                    <div class="alert-header">
                        <div class="alert-type normal">Normal</div>
                        <div class="alert-time">4 hours ago</div>
                    </div>
                    <div class="alert-message">Electricity Bill Due<br>Your Electricity bill of ₹1,200 is due on May 15. Tap here to avoid late fees.</div>
                </div>
                
                <div class="alert-item">
                    <div class="alert-header">
                        <div class="alert-type normal">Normal</div>
                        <div class="alert-time">Yesterday</div>
                    </div>
                    <div class="alert-message">Savings Goal Update<br>Great work! You and 50% towards your Europe trip goal. Keep saving!</div>
                </div>
                
                <button class="add-reminder-btn" onclick="showReminderForm()">+ Add Bill/Loan Reminder</button>
                
                <div class="reminder-form" id="reminderForm">
                    <h3>Add New Reminder</h3>
                    <input type="text" id="reminderTitle" placeholder="Bill/Loan name (e.g., Electricity Bill)">
                    <input type="number" id="reminderAmount" placeholder="Amount (₹)">
                    <input type="date" id="reminderDate">
                    <select id="reminderType">
                        <option value="bill">Bill Payment</option>
                        <option value="loan">Loan EMI</option>
                        <option value="subscription">Subscription</option>
                        <option value="other">Other</option>
                    </select>
                    <div style="display: flex; gap: 10px;">
                        <button class="save-btn" onclick="saveReminder()" style="flex: 1; margin-bottom: 0;">Save Reminder</button>
                        <button class="cancel-btn" onclick="hideReminderForm()" style="flex: 1; margin-bottom: 0;">Cancel</button>
                    </div>
                </div>
                
                <div class="alert-item">
                    <div class="alert-header">
                        <div class="alert-type normal">Normal</div>
                        <div class="alert-time">3 days ago</div>
                    </div>
                    <div class="alert-message">AI Financial Health Report<br>Your monthly spending decreased by 12%! AI suggests saving the extra ₹2,300 for your vacation goal.</div>
                </div>
                
                <div class="alert-item warning">
                    <div class="alert-header">
                        <div class="alert-type warning">Warning</div>
                        <div class="alert-time">5 days ago</div>
                    </div>
                    <div class="alert-message">Budget Limit Reached<br>You've spent 85% of your monthly entertainment budget. AI recommends reducing movie and dining expenses.</div>
                </div>
            </div>
        </div>
        
        <!-- Goals Screen -->
        <div class="screen" id="goals">
            <div class="goals">
                <div class="goals-header">
                    <div class="goals-title">Savings Goals</div>
                    <div class="goals-subtitle">Track and achieve your financial goals with AI assistance</div>
                    <button class="add-goal-btn" onclick="addNewGoal()">+ Add New Goal</button>
                </div>
                
                <div class="goal-item">
                    <div class="goal-header">
                        <div>
                            <div class="goal-name">Europe Trip</div>
                            <div class="goal-frequency">Monthly</div>
                        </div>
                    </div>
                    <div class="goal-amounts">
                        <div class="goal-current">₹75,000</div>
                        <div class="goal-target">Target ₹150,000</div>
                    </div>
                    <div class="goal-progress">
                        <div class="goal-progress-fill" style="width: 50%"></div>
                    </div>
                    <div class="goal-percentage">50% Achieved</div>
                </div>
                
                <div class="goal-item">
                    <div class="goal-header">
                        <div>
                            <div class="goal-name">Emergency Fund</div>
                            <div class="goal-frequency">Monthly</div>
                        </div>
                    </div>
                    <div class="goal-amounts">
                        <div class="goal-current">₹45,000</div>
                        <div class="goal-target">Target ₹100,000</div>
                    </div>
                    <div class="goal-progress">
                        <div class="goal-progress-fill" style="width: 45%"></div>
                    </div>
                    <div class="goal-percentage">45% Achieved</div>
                </div>
                
                <div class="goal-item">
                    <div class="goal-header">
                        <div>
                            <div class="goal-name">New Laptop</div>
                            <div class="goal-frequency">Weekly</div>
                        </div>
                    </div>
                    <div class="goal-amounts">
                        <div class="goal-current">₹25,000</div>
                        <div class="goal-target">Target ₹80,000</div>
                    </div>
                    <div class="goal-progress">
                        <div class="goal-progress-fill" style="width: 31%"></div>
                    </div>
                    <div class="goal-percentage">31% Achieved</div>
                </div>
            </div>
        </div>
        
        <!-- Goal Form Screen -->
        <div class="screen" id="goalForm">
            <div class="profile">
                <div class="profile-header">
                    <h2 class="profile-title">Create New Goal</h2>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Goal Name</label>
                    <input type="text" class="form-input" id="goalNameInput" placeholder="e.g., Dream Car, House Down Payment">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Target Amount (₹)</label>
                    <input type="number" class="form-input" id="goalAmountInput" placeholder="0" min="0" step="100">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Frequency</label>
                    <select class="form-input" id="goalFrequencySelect">
                        <option value="Weekly">Weekly</option>
                        <option value="Monthly" selected>Monthly</option>
                        <option value="Quarterly">Quarterly</option>
                        <option value="Yearly">Yearly</option>
                    </select>
                </div>
                
                <button class="continue-btn" onclick="saveNewGoal()">Create Goal</button>
                <button class="cancel-btn" onclick="cancelGoalCreation()">Cancel</button>
            </div>
        </div>
        
        <!-- Profile Screen -->
        <div class="screen" id="profile">
            <div class="profile">
                <div class="profile-header">
                    <h2 class="profile-title">Profile</h2>
                    <div class="profile-avatar">
                        <span style="font-size: 36px;">👤</span>
                    </div>
                    <div class="profile-name">Jane Doe</div>
                </div>
                
                <div class="profile-info">
                    <div class="profile-item">
                        <span class="profile-item-icon">📧</span>
                        <span>jane.doe@example.com</span>
                    </div>
                    <div class="profile-item">
                        <span class="profile-item-icon">📱</span>
                        <span>+91 98765 43210</span>
                    </div>
                </div>
                
                <button class="edit-profile-btn" onclick="editProfile()">Edit Profile</button>
                
                <div class="profile-section">
                    <div class="section-title">Account</div>
                    <div class="profile-menu-item">
                        <span class="menu-item-icon">🔐</span>
                        <span class="menu-item-text">Security Settings</span>
                        <span class="menu-item-arrow">›</span>
                    </div>
                    <div class="profile-menu-item">
                        <span class="menu-item-icon">🔔</span>
                        <span class="menu-item-text">Notifications</span>
                        <span class="menu-item-arrow">›</span>
                    </div>
                    <div class="profile-menu-item">
                        <span class="menu-item-icon">🌐</span>
                        <span class="menu-item-text">Language</span>
                        <span class="menu-item-arrow">›</span>
                    </div>
                </div>
                
                <div class="profile-section">
                    <div class="section-title">App</div>
                    <div class="profile-menu-item">
                        <span class="menu-item-icon">❓</span>
                        <span class="menu-item-text">Help & Support</span>
                        <span class="menu-item-arrow">›</span>
                    </div>
                    <div class="profile-menu-item">
                        <span class="menu-item-icon">📄</span>
                        <span class="menu-item-text">Terms & Privacy</span>
                        <span class="menu-item-arrow">›</span>
                    </div>
                    <div class="profile-menu-item">
                        <span class="menu-item-icon">🚪</span>
                        <span class="menu-item-text">Logout</span>
                        <span class="menu-item-arrow">›</span>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Edit Profile Screen -->
        <div class="screen" id="editProfile">
            <div class="profile">
                <div class="profile-header">
                    <h2 class="profile-title">Edit Profile</h2>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Full Name</label>
                    <input type="text" class="form-input" id="editFullName">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Email Address</label>
                    <input type="email" class="form-input" id="editEmail">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Mobile Number</label>
                    <input type="tel" class="form-input" id="editMobile">
                </div>
                
                <button class="continue-btn" onclick="saveProfileChanges()">Save Changes</button>
                <button class="cancel-btn" onclick="showScreen('profile')">Cancel</button>
            </div>
        </div>
        
        <!-- Bottom Navigation -->
        <div class="bottom-nav">
            <button class="nav-item active" onclick="showScreen('dashboard')">
                <div class="nav-icon">🏠</div>
                <div class="nav-label">Home</div>
            </button>
            <button class="nav-item" onclick="showScreen('trackEntry')">
                <div class="nav-icon">➕</div>
                <div class="nav-label">Track</div>
            </button>
            <button class="nav-item" onclick="showScreen('analysis')">
                <div class="nav-icon">📊</div>
                <div class="nav-label">Analysis</div>
            </button>
            <button class="nav-item" onclick="showScreen('alerts')">
                <div class="nav-icon">🔔</div>
                <div class="nav-label">Alerts</div>
                <div class="notification-badge">3</div>
            </button>
            <button class="nav-item" onclick="showScreen('goals')">
                <div class="nav-icon">🎯</div>
                <div class="nav-label">Goals</div>
            </button>
        </div>
        
        <!-- AI Chatbot -->
        <div class="chatbot" onclick="toggleChat()">🤖</div>
        
        <!-- Chat Window -->
        <div class="chat-window" id="chatWindow">
            <div class="chat-header">
                <div class="chat-title">AI Assistant</div>
                <button class="chat-close" onclick="toggleChat()">✕</button>
            </div>
            <div class="chat-messages" id="chatMessages">
                <div class="message bot">
                    Hello! I'm your AI financial assistant. I can help you with budgeting, expense analysis, and financial planning. How can I assist you today?
                </div>
            </div>
            <div class="chat-input-container">
                <input type="text" class="chat-input" id="chatInput" placeholder="Type your message..." onkeypress="handleChatInput(event)">
            </div>
        </div>
        
        <!-- AI Alert Popup -->
        <div class="ai-alert" id="aiAlert">
            <div class="ai-alert-header">
                <span class="ai-alert-icon" id="aiAlertIcon">🤖</span>
                <span class="ai-alert-title" id="aiAlertTitle">AI Alert</span>
            </div>
            <div class="ai-alert-message" id="aiAlertMessage">Message</div>
            <div class="blockchain-hash" id="aiAlertHash"></div>
        </div>
    </div>

    <script>
        // App Data
        let appData = {
            currentScreen: 'onboarding',
            entryType: 'expense',
            user: {
                name: 'Jane Doe',
                email: 'jane.doe@example.com',
                mobile: '+91 98765 43210',
                totalIncome: 45000,
                totalExpenses: 18500,
                balance: 26500,
                karmaTokens: 250
            },
            transactions: [],
            goals: [
                {id: 1, name: 'Europe Trip', current: 75000, target: 150000, frequency: 'Monthly'},
                {id: 2, name: 'Emergency Fund', current: 45000, target: 100000, frequency: 'Monthly'},
                {id: 3, name: 'New Laptop', current: 25000, target: 80000, frequency: 'Weekly'}
            ]
        };

        // Blockchain & AI Functions
        function generateBlockchainHash(data) {
            const hash = CryptoJS.SHA256(data + Date.now()).toString();
            return hash.substring(0, 16);
        }

        function verifyTransaction(transaction) {
            const dataString = JSON.stringify(transaction);
            return generateBlockchainHash(dataString);
        }

        function aiCategorizeTransaction(description, amount) {
            const keywords = {
                food: ['food', 'restaurant', 'cafe', 'grocery', 'dinner', 'lunch', 'breakfast', 'pizza', 'burger'],
                transport: ['uber', 'taxi', 'bus', 'train', 'fuel', 'gas', 'parking', 'cab'],
                shopping: ['shopping', 'store', 'mall', 'amazon', 'flipkart', 'clothes', 'shirt'],
                entertainment: ['movie', 'cinema', 'music', 'game', 'netflix', 'spotify'],
                utilities: ['electricity', 'water', 'internet', 'phone', 'bill'],
                health: ['doctor', 'medicine', 'hospital', 'pharmacy', 'health']
            };

            const desc = description.toLowerCase();
            let category = 'other';
            let confidence = 0.6;

            for (const [cat, words] of Object.entries(keywords)) {
                if (words.some(word => desc.includes(word))) {
                    category = cat;
                    confidence = 0.9;
                    break;
                }
            }

            return {category, confidence};
        }

        function detectFraud(description, amount) {
            // Simple fraud detection rules
            if (amount > 50000) {
                return {
                    isFraud: true,
                    confidence: 0.8,
                    reason: 'Unusually large transaction amount'
                };
            }
            
            if (description.toLowerCase().includes('suspicious')) {
                return {
                    isFraud: true,
                    confidence: 0.95,
                    reason: 'Suspicious keywords detected'
                };
            }
            
            if (amount > 10000) {
                return {
                    isFraud: false,
                    confidence: 0.3,
                    reason: 'Large transaction detected but within allowed limit'
                };
            }
            
            return {isFraud: false, confidence: 0.1, reason: 'Transaction appears normal'};
        }
        
        // Screen Management
        function showScreen(screenId) {
            // Hide all screens
            document.querySelectorAll('.screen').forEach(screen => {
                screen.classList.remove('active');
            });
            
            // Show target screen
            document.getElementById(screenId).classList.add('active');
            appData.currentScreen = screenId;
            
            // Update navigation
            updateNavigation(screenId);
            
            // Set current date for track entry
            if (screenId === 'trackEntry') {
                document.getElementById('entryDate').valueAsDate = new Date();
            }
        }
        
        function updateNavigation(activeScreen) {
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            
            const navMapping = {
                'dashboard': 0,
                'trackEntry': 1,
                'analysis': 2,
                'alerts': 3,
                'goals': 4
            };
            
            if (navMapping[activeScreen] !== undefined) {
                document.querySelectorAll('.nav-item')[navMapping[activeScreen]].classList.add('active');
            }
        }
        
        // Password Visibility Toggle
        function togglePasswordVisibility(inputId) {
            const input = document.getElementById(inputId);
            const button = input.nextElementSibling;
            
            if (input.type === 'password') {
                input.type = 'text';
                button.textContent = '🙈';
            } else {
                input.type = 'password';
                button.textContent = '👁️';
            }
        }
        
        // Account Creation
        function createAccount() {
            const fullName = document.getElementById('fullName').value;
            const email = document.getElementById('email').value;
            const mobile = document.getElementById('mobile').value;
            const password = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (!fullName || !email || !mobile || !password) {
                showAIAlert('warning', 'Missing Information', 'Please fill in all required fields');
                return;
            }
            
            if (password !== confirmPassword) {
                showAIAlert('error', 'Password Mismatch', 'Passwords do not match. Please try again.');
                return;
            }
            
            // Update user data
            appData.user.name = fullName;
            appData.user.email = email;
            appData.user.mobile = mobile;
            
            // Generate blockchain identity
            const userHash = generateBlockchainHash(JSON.stringify({fullName, email, mobile}));
            
            showAIAlert('success', 'Account Created Successfully!', `Welcome to BUDGLE! Your blockchain identity: ${userHash}. AI assistant is now active.`);
            
            setTimeout(() => {
                showScreen('dashboard');
                updateProfileDisplay(); // Update profile with new user data
                startAIDemo();
            }, 2000);
        }
        
        // Entry Tab Switching
        function switchEntryTab(type) {
            appData.entryType = type;
            
            document.querySelectorAll('.entry-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            event.target.classList.add('active');
            
            // Update placeholder and styling
            const amountInput = document.getElementById('entryAmount');
            const categorySelect = document.getElementById('entryCategory');
            const paymentMethodSection = document.getElementById('paymentMethodSection');
            
            if (type === 'expense') {
                amountInput.style.color = '#f44336';
                amountInput.placeholder = '0.00';
                
                // Show payment method section for expenses
                paymentMethodSection.style.display = 'block';
                
                // Update to expense categories
                categorySelect.innerHTML = `
                    <option value="">Select Category</option>
                    <option value="food">🍔 Food & Dining</option>
                    <option value="transport">🚗 Transportation</option>
                    <option value="shopping">🛍 Shopping</option>
                    <option value="entertainment">🎦 Entertainment</option>
                    <option value="health">🏥 Health</option>
                    <option value="utilities">⚡ Utilities</option>
                    <option value="education">📚 Education</option>
                    <option value="other">📝 Other</option>
                `;
            } else {
                amountInput.style.color = '#4CAF50';
                amountInput.placeholder = '0.00';
                
                // Hide payment method section for income
                paymentMethodSection.style.display = 'none';
                
                // Update to income categories
                categorySelect.innerHTML = `
                    <option value="">Select Income Category</option>
                    <option value="job-salary">💼 Job Salary</option>
                    <option value="business">🏢 Business Revenue</option>
                    <option value="freelance">💻 Freelance Work</option>
                    <option value="part-time">⏰ Part-time Job</option>
                    <option value="rental">🏠 Rental Income</option>
                    <option value="investment">📈 Investment Returns</option>
                    <option value="dividend">💰 Dividend Income</option>
                    <option value="side-hustle">🚪 Side Hustle</option>
                    <option value="consultancy">🤝 Consultancy</option>
                    <option value="gift-bonus">🎁 Gift/Bonus</option>
                    <option value="other-income">📝 Other Income</option>
                `;
            }
        }
        
        // Save Transaction
        function saveTransaction() {
            const amount = parseFloat(document.getElementById('entryAmount').value);
            const category = document.getElementById('entryCategory').value;
            const date = document.getElementById('entryDate').value;
            const note = document.getElementById('entryNote').value;
            const paymentMethod = document.getElementById('entryPaymentMethod').value;
            
            if (!amount || !category || !date) {
                showAIAlert('warning', 'Missing Information', 'Please fill in amount, category, and date');
                return;
            }
            
            // Check if payment method is required for expenses
            if (appData.entryType === 'expense' && !paymentMethod) {
                showAIAlert('warning', 'Missing Payment Method', 'Please select a payment method for expenses');
                return;
            }
            
            const transactionAmount = appData.entryType === 'expense' ? -amount : amount;
            
            // AI Categorization
            const aiResult = aiCategorizeTransaction(note || category, amount);
            
            // Fraud Detection
            const fraudCheck = detectFraud(note || category, amount);
            
            if (fraudCheck.isFraud) {
                showAIAlert('danger', '🚨 Fraud Alert', `Suspicious transaction detected: ${fraudCheck.reason}. Transaction blocked for security.`);
                return;
            }
            
            // Create transaction
            const transaction = {
                id: Date.now(),
                title: note || `${category.charAt(0).toUpperCase() + category.slice(1)} Transaction`,
                amount: transactionAmount,
                category: aiResult.category,
                date: date,
                type: appData.entryType,
                paymentMethod: appData.entryType === 'expense' ? paymentMethod : null,
                hash: verifyTransaction({amount: transactionAmount, category, date, note, paymentMethod})
            };
            
            // Add to transactions
            appData.transactions.unshift(transaction);
            
            // Update balances
            if (appData.entryType === 'expense') {
                appData.user.totalExpenses += amount;
                appData.user.balance -= amount;
            } else {
                appData.user.totalIncome += amount;
                appData.user.balance += amount;
            }
            
            // Award karma tokens
            const tokensEarned = Math.floor(amount / 100);
            appData.user.karmaTokens += tokensEarned;
            
            // Update UI
            updateDashboard();
            
            // Clear form
            document.getElementById('entryAmount').value = '';
            document.getElementById('entryCategory').value = '';
            document.getElementById('entryNote').value = '';
            if (appData.entryType === 'expense') {
                document.getElementById('entryPaymentMethod').value = '';
            }
            
            const paymentMethodText = paymentMethod ? ` via ${paymentMethod.toUpperCase()}` : '';
            showAIAlert('success', 'Transaction Saved', `${appData.entryType === 'expense' ? 'Expense' : 'Income'} of ₹${amount}${paymentMethodText} added and verified on blockchain. AI confidence: ${Math.round(aiResult.confidence * 100)}%. Earned ${tokensEarned} karma tokens!`);
            
            setTimeout(() => {
                showScreen('dashboard');
            }, 2000);
        }
        
        // Calculate Category Percentages
        function calculateCategoryPercentages() {
            const expenses = appData.transactions.filter(t => t.amount < 0);
            const categoryTotals = {};
            let totalExpenses = 0;
            
            expenses.forEach(transaction => {
                const category = transaction.category || 'other';
                const amount = Math.abs(transaction.amount);
                categoryTotals[category] = (categoryTotals[category] || 0) + amount;
                totalExpenses += amount;
            });
            
            const percentages = {};
            Object.keys(categoryTotals).forEach(category => {
                percentages[category] = totalExpenses > 0 ? (categoryTotals[category] / totalExpenses) * 100 : 0;
            });
            
            return percentages;
        }
        
        // Calculate Income Category Percentages
        function calculateIncomePercentages() {
            const incomes = appData.transactions.filter(t => t.amount > 0);
            const categoryTotals = {};
            let totalIncome = 0;
            
            incomes.forEach(transaction => {
                const category = transaction.category || 'other-income';
                const amount = Math.abs(transaction.amount);
                categoryTotals[category] = (categoryTotals[category] || 0) + amount;
                totalIncome += amount;
            });
            
            const percentages = {};
            Object.keys(categoryTotals).forEach(category => {
                percentages[category] = totalIncome > 0 ? (categoryTotals[category] / totalIncome) * 100 : 0;
            });
            
            return percentages;
        }
        
        // Update Pie Charts
        function updatePieCharts() {
            const percentages = calculateCategoryPercentages();
            const categoryColors = {
                food: '#4CAF50',
                transport: '#E91E63', 
                shopping: '#FF9800',
                entertainment: '#9C27B0',
                health: '#2196F3',
                utilities: '#795548',
                education: '#607D8B',
                other: '#757575'
            };
            
            const categoryNames = {
                food: 'Food & Dining',
                transport: 'Transportation',
                shopping: 'Shopping',
                entertainment: 'Entertainment',
                health: 'Health',
                utilities: 'Utilities',
                education: 'Education',
                other: 'Other'
            };
            
            // Build conic-gradient for expense chart
            let gradient = 'conic-gradient(';
            let currentPercentage = 0;
            let legendHtml = '';
            
            Object.entries(percentages).forEach(([category, percentage], index) => {
                if (percentage > 0) {
                    const color = categoryColors[category] || categoryColors.other;
                    const name = categoryNames[category] || 'Other';
                    
                    gradient += `${color} ${currentPercentage}% ${currentPercentage + percentage}%`;
                    currentPercentage += percentage;
                    
                    legendHtml += `
                        <div class="legend-item">
                            <div class="legend-color" style="background: ${color}"></div>
                            <div class="legend-text">${name}</div>
                            <div class="legend-percentage">${Math.round(percentage)}%</div>
                        </div>
                    `;
                    
                    if (index < Object.keys(percentages).length - 1 && currentPercentage < 100) {
                        gradient += ', ';
                    }
                }
            });
            gradient += ')';
            
            // Update expense chart and legend
            const expenseChart = document.querySelector('.expense-chart');
            const expenseLegend = document.getElementById('expenseLegend');
            
            if (expenseChart) {
                expenseChart.style.background = gradient;
            }
            if (expenseLegend) {
                expenseLegend.innerHTML = legendHtml || '<div class="legend-item"><div class="legend-color" style="background: #4CAF50"></div><div class="legend-text">No expenses yet</div><div class="legend-percentage">0%</div></div>';
            }
            
            // Update income chart breakdown
            const incomeBreakdown = calculateIncomePercentages();
            const incomeChart = document.querySelector('.income-chart');
            const incomeLegend = document.getElementById('incomeLegend');
            
            // Build income chart gradient
            let incomeGradient = 'conic-gradient(';
            let incomeCurrentPercentage = 0;
            let incomeLegendHtml = '';
            
            const incomeCategories = {
                'job-salary': {name: 'Job Salary', color: '#4CAF50'},
                'freelance': {name: 'Freelance', color: '#2196F3'},
                'business': {name: 'Business', color: '#FF9800'},
                'investment': {name: 'Investment', color: '#9C27B0'},
                'other-income': {name: 'Other Income', color: '#607D8B'}
            };
            
            Object.entries(incomeBreakdown).forEach(([category, percentage], index) => {
                if (percentage > 0) {
                    const categoryInfo = incomeCategories[category] || {name: 'Other', color: '#757575'};
                    
                    incomeGradient += `${categoryInfo.color} ${incomeCurrentPercentage}% ${incomeCurrentPercentage + percentage}%`;
                    incomeCurrentPercentage += percentage;
                    
                    incomeLegendHtml += `
                        <div class="legend-item">
                            <div class="legend-color" style="background: ${categoryInfo.color}"></div>
                            <div class="legend-text">${categoryInfo.name}</div>
                            <div class="legend-percentage">${Math.round(percentage)}%</div>
                        </div>
                    `;
                    
                    if (index < Object.keys(incomeBreakdown).length - 1 && incomeCurrentPercentage < 100) {
                        incomeGradient += ', ';
                    }
                }
            });
            
            if (incomeCurrentPercentage === 0) {
                incomeGradient = 'conic-gradient(#e0e0e0 0% 100%)';
                incomeLegendHtml = '<div class="legend-item"><div class="legend-color" style="background: #e0e0e0"></div><div class="legend-text">No income yet</div><div class="legend-percentage">0%</div></div>';
            } else {
                incomeGradient += ')';
            }
            
            if (incomeChart) {
                incomeChart.style.background = incomeGradient;
            }
            if (incomeLegend) {
                incomeLegend.innerHTML = incomeLegendHtml;
            }
        }

        // Update Dashboard
        function updateDashboard() {
            document.querySelector('.expense-amount.expense').textContent = `₹${appData.user.totalExpenses.toLocaleString()}`;
            document.querySelector('.expense-amount.income').textContent = `₹${appData.user.totalIncome.toLocaleString()}`;
            document.querySelector('.savings-amount').textContent = `₹${appData.user.balance.toLocaleString()}`;
            document.querySelector('.expense-amount.karma').textContent = 💎 ${appData.user.karmaTokens.toLocaleString()};

            
            // Update pie charts with actual data
            updatePieCharts();}
            
            // Update transactions list
            const transactionsList = document.getElementById('transactionsList');
            if (transactionsList) {
                transactionsList.innerHTML = appData.transactions.slice(0, 5).map(transaction => {
                    const categoryIcons = {
                        food: {icon: '🛒', bg: '#e8f5e8', color: '#4CAF50'},
                        transport: {icon: '🚗', bg: '#fce4ec', color: '#E91E63'},
                        shopping: {icon: '👕', bg: '#fff3e0', color: '#FF9800'},
                        income: {icon: '💼', bg: '#e3f2fd', color: '#2196F3'},
                        utilities: {icon: '⚡', bg: '#f3e5f5', color: '#9C27B0'},
                        other: {icon: '💰', bg: '#f5f5f5', color: '#757575'}
                    };
                    
                    const categoryStyle = categoryIcons[transaction.category] || categoryIcons.other;
                    
                    const paymentMethodText = transaction.paymentMethod ? ` • ${transaction.paymentMethod.toUpperCase()}` : '';
                    return `
                        <div class="transaction-item">
                            <div class="transaction-icon" style="background: ${categoryStyle.bg}; color: ${categoryStyle.color};">${categoryStyle.icon}</div>
                            <div class="transaction-details">
                                <div class="transaction-title">${transaction.title}</div>
                                <div class="transaction-subtitle">${transaction.category} • ${new Date(transaction.date).toLocaleDateString()}${paymentMethodText}</div>
                            </div>
                            <div class="transaction-amount ${transaction.amount > 0 ? 'positive' : 'negative'}">₹${Math.abs(transaction.amount)}</div>
                        </div>
                    `;
                }).join('');
            }
        }
        
        // Period Switching for Analysis
        function switchPeriod(period) {
            document.querySelectorAll('.period-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            event.target.classList.add('active');
            
            showAIAlert('info', 'Analysis Updated', `Switched to ${period} analysis. AI is processing your spending patterns for ${period} insights.`);
        }
        
        // Profile Editing Functions
        function editProfile() {
            // Pre-fill the edit form with current data
            document.getElementById('editFullName').value = appData.user.name;
            document.getElementById('editEmail').value = appData.user.email;
            document.getElementById('editMobile').value = appData.user.mobile;
            showScreen('editProfile');
        }
        
        function saveProfileChanges() {
            const newName = document.getElementById('editFullName').value.trim();
            const newEmail = document.getElementById('editEmail').value.trim();
            const newMobile = document.getElementById('editMobile').value.trim();
            
            if (!newName || !newEmail || !newMobile) {
                showAIAlert('warning', 'Missing Information', 'Please fill in all fields');
                return;
            }
            
            if (!newEmail.includes('@')) {
                showAIAlert('error', 'Invalid Email', 'Please enter a valid email address');
                return;
            }
            
            // Update user data
            appData.user.name = newName;
            appData.user.email = newEmail;
            appData.user.mobile = newMobile;
            
            // Update profile display
            updateProfileDisplay();
            
            showAIAlert('success', 'Profile Updated', 'Your profile has been successfully updated and secured on blockchain!');
            
            // Return to profile screen
            setTimeout(() => {
                showScreen('profile');
            }, 1500);
        }
        
        // Update Profile Display
        function updateProfileDisplay() {
            const profileName = document.querySelector('.profile-name');
            const profileEmailSpan = document.querySelector('.profile-item span:nth-child(2)');
            const profileMobileSpan = document.querySelectorAll('.profile-item span')[3]; // Second profile-item's second span
            const greetingName = document.querySelector('.greeting h2');
            
            if (profileName) profileName.textContent = appData.user.name;
            if (profileEmailSpan) profileEmailSpan.textContent = appData.user.email;
            if (profileMobileSpan) profileMobileSpan.textContent = appData.user.mobile;
            if (greetingName) greetingName.textContent = `Hello, ${appData.user.name}!`;
        }
        
        // Add New Goal Function
        function addNewGoal() {
            showScreen('goalForm');
        }
        
        function saveNewGoal() {
            const goalName = document.getElementById('goalNameInput').value.trim();
            const targetAmount = parseFloat(document.getElementById('goalAmountInput').value);
            const frequency = document.getElementById('goalFrequencySelect').value;
            
            if (!goalName) {
                showAIAlert('warning', 'Missing Information', 'Please enter a goal name');
                return;
            }
            
            if (!targetAmount || targetAmount <= 0) {
                showAIAlert('warning', 'Invalid Amount', 'Please enter a valid target amount');
                return;
            }
            
            const newGoal = {
                id: Date.now(),
                name: goalName,
                current: 0,
                target: targetAmount,
                frequency: frequency
            };
            
            appData.goals.push(newGoal);
            updateGoalsDisplay();
            
            // Clear form
            document.getElementById('goalNameInput').value = '';
            document.getElementById('goalAmountInput').value = '';
            document.getElementById('goalFrequencySelect').value = 'Monthly';
            
            showScreen('goals');
            showAIAlert('success', 'Goal Created!', `New goal "${goalName}" created successfully! AI will help you track progress and optimize your savings strategy.`);
        }
        
        function cancelGoalCreation() {
            document.getElementById('goalNameInput').value = '';
            document.getElementById('goalAmountInput').value = '';
            document.getElementById('goalFrequencySelect').value = 'Monthly';
            showScreen('goals');
        }
        
        function deleteGoal(goalId) {
            if (confirm('Are you sure you want to delete this goal?')) {
                // Remove from default goals by updating the HTML display
                updateGoalsDisplay();
                showAIAlert('info', 'Goal Removed', 'Goal has been removed from your list.');
            }
        }
        
        // Update Goals Display
        function updateGoalsDisplay() {
            const goalsContainer = document.querySelector('.goals');
            const goalItems = appData.goals.map(goal => {
                const percentage = goal.target > 0 ? (goal.current / goal.target) * 100 : 0;
                return `
                    <div class="goal-item">
                        <div class="goal-header">
                            <div>
                                <div class="goal-name">${goal.name}</div>
                                <div class="goal-frequency">${goal.frequency}</div>
                            </div>
                        </div>
                        <div class="goal-amounts">
                            <div class="goal-current">₹${goal.current.toLocaleString()}</div>
                            <div class="goal-target">Target ₹${goal.target.toLocaleString()}</div>
                        </div>
                        <div class="goal-progress">
                            <div class="goal-progress-fill" style="width: ${Math.min(percentage, 100)}%"></div>
                        </div>
                        <div class="goal-percentage">${Math.round(percentage)}% Achieved</div>
                    </div>
                `;
            }).join('');
            
            // Find the goals container and update only the goal items
            const goalsSection = document.querySelector('.goals .goals-header').parentElement;
            const existingGoalItems = goalsSection.querySelectorAll('.goal-item');
            existingGoalItems.forEach(item => item.remove());
            
            goalsSection.innerHTML += goalItems;
        }
        
        // AI Alert System
        function showAIAlert(type, title, message) {
            const alert = document.getElementById('aiAlert');
            const alertTitle = document.getElementById('aiAlertTitle');
            const alertMessage = document.getElementById('aiAlertMessage');
            const alertHash = document.getElementById('aiAlertHash');
            
            const alertTypes = {
                success: {class: 'success', color: '#4CAF50'},
                warning: {class: 'warning', color: '#FF9800'},
                danger: {class: 'danger', color: '#f44336'},
                error: {class: 'danger', color: '#f44336'},
                info: {class: 'info', color: '#2196F3'},
                savings: {class: 'success', color: '#4CAF50'}
            };
            
            const alertType = alertTypes[type] || alertTypes.info;
            
            alert.style.borderLeftColor = alertType.color;
            alertTitle.textContent = title;
            alertMessage.textContent = message;
            alertHash.textContent = `Hash: ${generateBlockchainHash(message)}`;
            
            alert.classList.add('show');
            
            setTimeout(() => {
                alert.classList.remove('show');
            }, 4000);
        }
        
        // Reminder Functions
        function showReminderForm() {
            document.getElementById('reminderForm').style.display = 'block';
        }
        
        function hideReminderForm() {
            document.getElementById('reminderForm').style.display = 'none';
        }
        
        function saveReminder() {
            const title = document.getElementById('reminderTitle').value;
            const amount = document.getElementById('reminderAmount').value;
            const date = document.getElementById('reminderDate').value;
            const type = document.getElementById('reminderType').value;
            
            if (!title || !amount || !date) {
                showAIAlert('warning', 'Missing Information', 'Please fill in all fields');
                return;
            }
            
            // Clear form
            document.getElementById('reminderTitle').value = '';
            document.getElementById('reminderAmount').value = '';
            document.getElementById('reminderDate').value = '';
            document.getElementById('reminderType').value = 'bill';
            
            hideReminderForm();
            showAIAlert('success', 'Reminder Added', `${type} reminder for "${title}" (₹${amount}) has been set for ${new Date(date).toLocaleDateString()}.`);
        }
        
        // Chat Functions
        function toggleChat() {
            const chatWindow = document.getElementById('chatWindow');
            chatWindow.style.display = chatWindow.style.display === 'flex' ? 'none' : 'flex';
        }
        
        function handleChatInput(event) {
            if (event.key === 'Enter') {
                const input = document.getElementById('chatInput');
                const message = input.value.trim();
                
                if (message) {
                    addChatMessage(message, 'user');
                    input.value = '';
                    
                    // Simulate AI response
                    setTimeout(() => {
                        const aiResponse = generateAIResponse(message);
                        addChatMessage(aiResponse, 'bot');
                    }, 1000);
                }
            }
        }
        
        function addChatMessage(message, sender) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            messageDiv.textContent = message;
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function generateAIResponse(userMessage) {
            const responses = {
                'help': 'I can help you with expense tracking, budget analysis, savings goals, and financial planning. What would you like to know?',
                'budget': 'Based on your data, you\'re spending 41% of your income. I recommend setting aside 20% for savings and investing.',
                'savings': `Great question! You currently have ₹${appData.user.balance.toLocaleString()} saved. Consider increasing your savings rate to reach your goals faster.`,
                'goal': `You have ${appData.goals.length} active goals. Your Europe trip is 50% complete! Want to add a new goal?`,
                'expense': 'I can help you categorize expenses. Your biggest expense category appears to be food & dining. Would you like tips to reduce it?',
                'default': 'I understand you\'re asking about finances. Could you be more specific? I can help with budgets, savings, goals, or expense analysis.'
            };
            
            const lowerMessage = userMessage.toLowerCase();
            
            for (const [key, response] of Object.entries(responses)) {
                if (lowerMessage.includes(key)) {
                    return response;
                }
            }
            
            return responses.default;
        }
        
        // AI Demo Function
        function startAIDemo() {
            setTimeout(() => {
                showAIAlert('info', '🎯 AI Insight', 'Welcome! I\'ve analyzed your spending patterns. You\'re doing great with savings!');
            }, 3000);
            
            setTimeout(() => {
                showAIAlert('success', '💡 Smart Tip', 'AI suggests: Set up auto-savings of ₹5,000/month to reach your Europe trip goal 3 months faster!');
            }, 8000);
        }
        
        // Initialize App
        document.addEventListener('DOMContentLoaded', function() {
            // Set initial date
            document.getElementById('entryDate').valueAsDate = new Date();
            
            // Initialize with some demo data if needed
            updatePieCharts();
            
            // Start AI insights after a delay
            setTimeout(() => {
                showAIAlert('info', 'AI Assistant Active', 'Hello! I\'m your AI financial assistant. Click the 🤖 button to chat with me anytime!');
            }, 2000);
        });
    </script>
</body>
</html>
